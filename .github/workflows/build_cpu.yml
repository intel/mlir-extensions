name: CPU Build

on:
  pull_request:
    branches:
      - main
      - upstream
      - 'dist-ndarray'
  workflow_dispatch:
  workflow_call:

jobs:
  build:
    if: github.repository == 'intel-innersource/frameworks.ai.mlir.mlir-extensions'
    runs-on: [self-hosted, icx]
    defaults:
      run:
        shell: bash -noprofile --norc -eo pipefail {0}

    steps:
      - uses: actions/checkout@v4

      - name: Collect info
        run: |
          sh scripts/sysinfo.sh

      - name: Set Cache Vars
        run: |
          echo LLVM_SHA=$(cat build_tools/llvm_version.txt) | tee -a $GITHUB_ENV

      - name: Cache LLLVM-MLIR
        id: cache-llvm-mlir
        uses: actions/cache@v4
        env:
          LLVM_CACHE_NUMBER: 2  # Increase to reset cache
        with:
          path: |
            ${{ github.workspace }}/mlir
          key: gcc-llvm-${{ env.LLVM_CACHE_NUMBER }}-${{ env.LLVM_SHA }}

      - name: Build LLVM-MLIR
        if: steps.cache-llvm-mlir.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/llvm/llvm-project --branch main --single-branch
          cd llvm-project
          git checkout $LLVM_SHA
          git apply ../build_tools/patches/*.patch

          echo "INFO: Need to rebuild LLVM-MLIR. Previous installation for MLIR not found"
          cmake -G Ninja -B build -S llvm                                  \
            -DCMAKE_BUILD_TYPE=MinSizeRel                                  \
            -DLLVM_ENABLE_PROJECTS=mlir                                    \
            -DLLVM_ENABLE_ASSERTIONS=ON                                    \
            -DLLVM_USE_LINKER=gold                                         \
            -DLLVM_INSTALL_UTILS=ON                                        \
            -DLLVM_TARGETS_TO_BUILD=X86                                    \
            -DLLVM_ENABLE_BINDINGS=OFF                                     \
            -DLLVM_ENABLE_ZSTD=OFF                                         \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/mlir
          cmake --build build --target install

      - name: Setup IMEX and run tests
        run: |
          pip install lit
          ./scripts/compile.sh -DLLVM_LIT_ARGS="-a -j 4" -DMLIR_DIR=${{ github.workspace }}/mlir/lib/cmake/mlir

          cmake --build build --target check-imex | tee build/tests.txt

      - name: Upload tests.txt
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: tests_cpu.txt
          path: build/tests.txt
