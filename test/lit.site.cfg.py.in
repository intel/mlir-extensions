@LIT_SITE_CFG_IN_HEADER@

import sys
import subprocess

config.host_triple = "@LLVM_HOST_TRIPLE@"
config.target_triple = "@TARGET_TRIPLE@"
config.llvm_src_root = "@LLVM_SOURCE_DIR@"
config.llvm_obj_root = "@LLVM_BINARY_DIR@"
config.llvm_tools_dir = "@LLVM_TOOLS_DIR@"
config.llvm_lib_dir = "@LLVM_LIBS_DIR@"
config.llvm_shlib_dir = "@SHLIBDIR@"
config.llvm_shlib_ext = "@SHLIBEXT@"
config.llvm_exe_ext = "@EXEEXT@"
config.lit_tools_dir = "@LLVM_LIT_TOOLS_DIR@"
config.python_executable = os.path.normpath("@Python3_EXECUTABLE@")
config.gold_executable = "@GOLD_EXECUTABLE@"
config.ld64_executable = "@LD64_EXECUTABLE@"
config.enable_shared = @ENABLE_SHARED@
config.enable_assertions = @ENABLE_ASSERTIONS@
config.enable_vulkan_runner = @IMEX_ENABLE_VULKAN_RUNNER@
config.targets_to_build = "@TARGETS_TO_BUILD@"
config.native_target = "@LLVM_NATIVE_ARCH@"
config.llvm_bindings = "@LLVM_BINDINGS@".split(' ')
config.host_os = "@HOST_OS@"
config.host_cc = "@HOST_CC@"
config.host_cxx = "@HOST_CXX@"
# Note: ldflags can contain double-quoted paths, so must use single quotes here.
config.host_ldflags = '@HOST_LDFLAGS@'
config.llvm_use_sanitizer = "@LLVM_USE_SANITIZER@"
config.llvm_host_triple = '@LLVM_HOST_TRIPLE@'
config.host_arch = "@HOST_ARCH@"
config.mlir_runner_utils_dir = "@MLIR_RUNNER_UTILS_DIR@"
config.imex_src_root = "@IMEX_SOURCE_DIR@"
config.imex_obj_root = "@IMEX_BINARY_DIR@"
config.imex_tools_dir = "@IMEX_TOOLS_DIR@"
config.imex_lib_dir = "@IMEX_LIB_DIR@"
config.imex_enable_l0_runtime = @IMEX_ENABLE_L0_RUNTIME@
config.imex_enable_sycl_runtime = @IMEX_ENABLE_SYCL_RUNTIME@
config.imex_enable_opencl_runtime = @IMEX_ENABLE_OPENCL_RUNTIME@
config.imex_enable_bf16_tests = @IMEX_ENABLE_BF16_TESTS@
config.imex_enable_excluded_tests = @IMEX_ENABLE_EXCLUDED_TESTS@
config.imex_enable_ats_target = @IMEX_ENABLE_ATS_TARGET@
config.imex_enable_pvc_target = @IMEX_ENABLE_PVC_TARGET@

if sys.platform.startswith('win32'):
    config.shlib_prefix = ""
else:
    config.shlib_prefix = "lib"
config.imex_runner = os.path.normpath(os.path.join(config.imex_tools_dir, "imex-runner.py"))
config.mlir_runner_utils = os.path.normpath(os.path.join(config.mlir_runner_utils_dir, config.shlib_prefix + "mlir_runner_utils" + config.llvm_shlib_ext))
config.mlir_c_runner_utils = os.path.normpath(os.path.join(config.mlir_runner_utils_dir, config.shlib_prefix + "mlir_c_runner_utils" + config.llvm_shlib_ext))
if config.enable_vulkan_runner:
    config.vulkan_runtime_wrappers = os.path.normpath(os.path.join(config.mlir_runner_utils_dir, config.shlib_prefix + "vulkan-runtime-wrappers" + config.llvm_shlib_ext))
if config.imex_enable_sycl_runtime:
    config.sycl_runtime = os.path.normpath(os.path.join(config.imex_lib_dir, config.shlib_prefix + "sycl-runtime" + config.llvm_shlib_ext))
if config.imex_enable_opencl_runtime:
    config.opencl_runtime = os.path.normpath(os.path.join(config.imex_lib_dir, config.shlib_prefix + "opencl-runtime" + config.llvm_shlib_ext))
if config.imex_enable_l0_runtime:
    config.levelzero_runtime = os.path.normpath(os.path.join(config.imex_lib_dir, config.shlib_prefix + "level-zero-runtime" + config.llvm_shlib_ext))
config.imex_enable_igpu = config.imex_enable_l0_runtime or config.imex_enable_sycl_runtime or config.imex_enable_opencl_runtime
if config.imex_enable_igpu:
    config.l0_fp64_checker = os.path.normpath(os.path.join(config.imex_tools_dir, "l0-fp64-checker"))
    try:
        p = subprocess.run( [ config.l0_fp64_checker ], timeout=5 )
        if p.returncode == 0:
            config.igpu_fp64 = "--igpu-fp64"
        else:
            config.igpu_fp64 = "--no-igpu-fp64"
    except subprocess.TimeoutExpired:
        config.igpu_fp64 = "--no-igpu-fp64"
config.imex_runner_utils = os.path.normpath(os.path.join(config.imex_lib_dir, config.shlib_prefix + "imex_runner_utils" + config.llvm_shlib_ext))

# Support substitution of the tools_dir with user parameters. This is
# used when we can't determine the tool dir at configuration time.
try:
    config.llvm_tools_dir = config.llvm_tools_dir % lit_config.params
    config.llvm_lib_dir = config.llvm_lib_dir % lit_config.params
    config.llvm_shlib_dir = config.llvm_shlib_dir % lit_config.params
except KeyError:
    e = sys.exc_info()[1]
    key, = e.args
    lit_config.fatal("unable to find %r parameter, use '--param=%s=VALUE'" % (key,key))


import lit.llvm
lit.llvm.initialize(lit_config, config)

# Let the main config do the real work.
lit_config.load_config(config, "@IMEX_LIT_CFG_PY@")
