// NUMPLACEHOLDERS 3 NUMVARIANTS 3
// PLACEHOLDER DTYPE f32 f16 bf16
// PLACEHOLDER PRINTDTYPE @printMemrefF32 @printMemrefF16 @printMemrefBF16
// PLACEHOLDER CHECKDTYPE @printAllcloseF32 @printAllcloseF16 @printAllcloseBF16
// RUN: %python_executable %imex_runner -i %s --pass-pipeline-file=%p/linalg-to-cpu.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --shared-libs=%mlir_runner_utils,%mlir_c_runner_utils,%irunner_utils \
// RUN:                                       --entry-point-result=void --filecheck
// RUN: %python_executable %imex_runner --requires=l0-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --entry-point-result=void \
// RUN:                                       --shared-libs=%mlir_runner_utils,%mlir_c_runner_utils,%irunner_utils,%levelzero_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=sycl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%mlir_c_runner_utils,%irunner_utils,%sycl_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=opencl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%mlir_c_runner_utils,%opencl_runtime --filecheck
#map0 = affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>
#map1 = affine_map<(d0, d1, d2, d3, d4, d5, d6, d7) -> (d0, d1 * 2 + d5 * 3, d2 * 2 + d6 * 3, d3, d7)>
#map2 = affine_map<(d0, d1, d2, d3, d4, d5, d6, d7) -> (d5, d6, d3, d7, d4)>
#map3 = affine_map<(d0, d1, d2, d3, d4, d5, d6, d7) -> (d0, d1, d2, d3, d4)>
module @complex_conv_2d {
func.func @main() {
    %0 = arith.constant dense<1.0> : tensor<1x224x224x3x3x@DTYPE@>
    %1 = arith.constant dense<1.0> : tensor<3x3x3x3x32x@DTYPE@>
    %2 = call @test(%0, %1) : (tensor<1x224x224x3x3x@DTYPE@>, tensor<3x3x3x3x32x@DTYPE@>) -> tensor<1x112x112x3x32x@DTYPE@>
    %3 = tensor.extract_slice %2[0, 0, 0, 0, 0][1, 1, 1, 3, 32][1, 1, 1, 1, 1] : tensor<1x112x112x3x32x@DTYPE@> to tensor<3x32x@DTYPE@>
    %unranked = tensor.cast %3 : tensor<3x32x@DTYPE@> to tensor<*x@DTYPE@>
    %ref = arith.constant dense<[
                               [12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0],
                               [12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0],
                               [12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0,12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0]
                               ]>:tensor<3x32xf32>
    %unranked_ref = tensor.cast %ref : tensor<3x32xf32>to tensor<*xf32>
    call @CHECKDTYPE@(%unranked, %unranked_ref) : (tensor<*x@DTYPE@>, tensor<*xf32>) -> ()
    call @PRINTDTYPE@(%unranked) : (tensor<*x@DTYPE@>) -> ()
    return
    // CHECK:   [ALLCLOSE: TRUE]
  }
func.func private @PRINTDTYPE@(tensor<*x@DTYPE@>)
func.func private @CHECKDTYPE@(tensor<*x@DTYPE@>, tensor<*xf32>)
func.func @test(%arg0: tensor<1x224x224x3x3x@DTYPE@>, %arg1: tensor<3x3x3x3x32x@DTYPE@>) -> tensor<1x112x112x3x32x@DTYPE@> {
    %cst = arith.constant 0.000000e+00 : @DTYPE@
    %0 = tensor.empty() : tensor<1x224x224x3x3x@DTYPE@>
    %1 = linalg.generic {indexing_maps = [#map0, #map0], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%arg0 : tensor<1x224x224x3x3x@DTYPE@>) outs(%0 : tensor<1x224x224x3x3x@DTYPE@>) {
    ^bb0(%arg2: @DTYPE@, %arg3: @DTYPE@):
      linalg.yield %arg2 : @DTYPE@
    } -> tensor<1x224x224x3x3x@DTYPE@>
    %cst_0 = arith.constant 0.000000e+00 : @DTYPE@
    %2 = tensor.pad %1 low[0, 2, 2, 0, 0] high[0, 3, 3, 0, 0] {
    ^bb0(%arg2: index, %arg3: index, %arg4: index, %arg5: index, %arg6: index):
      tensor.yield %cst_0 : @DTYPE@
    } : tensor<1x224x224x3x3x@DTYPE@> to tensor<1x229x229x3x3x@DTYPE@>
    %3 = tensor.empty() : tensor<1x112x112x3x32x@DTYPE@>
    %4 = linalg.fill ins(%cst : @DTYPE@) outs(%3 : tensor<1x112x112x3x32x@DTYPE@>) -> tensor<1x112x112x3x32x@DTYPE@>
    %5 = linalg.generic {indexing_maps = [#map1, #map2, #map3], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel", "reduction", "reduction", "reduction"]} ins(%2, %arg1 : tensor<1x229x229x3x3x@DTYPE@>, tensor<3x3x3x3x32x@DTYPE@>) outs(%4 : tensor<1x112x112x3x32x@DTYPE@>) attrs =  {iterator_ranges = [1, 112, 112, 3, 32, 3, 3, 3]} {
    ^bb0(%arg2: @DTYPE@, %arg3: @DTYPE@, %arg4: @DTYPE@):
      %6 = arith.mulf %arg2, %arg3 : @DTYPE@
      %7 = arith.addf %arg4, %6 : @DTYPE@
      linalg.yield %7 : @DTYPE@
    } -> tensor<1x112x112x3x32x@DTYPE@>
    return %5 : tensor<1x112x112x3x32x@DTYPE@>
  }
}
