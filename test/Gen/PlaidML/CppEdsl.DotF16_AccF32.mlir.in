// NUMPLACEHOLDERS 3 NUMVARIANTS 2
// PLACEHOLDER DTYPE f16 bf16
// PLACEHOLDER PRINTDTYPE @printMemrefF16 @printMemrefBF16
// PLACEHOLDER CHECKDTYPE @printAllcloseF16 @printAllcloseBF16
// RUN: %python_executable %imex_runner -i %s --pass-pipeline-file=%p/linalg-to-cpu.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --shared-libs=%mlir_runner_utils,%irunner_utils \
// RUN:                                       --entry-point-result=void --filecheck
// RUN: %python_executable %imex_runner --requires=l0-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --entry-point-result=void \
// RUN:                                       --shared-libs=%mlir_runner_utils,%irunner_utils,%levelzero_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=sycl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%irunner_utils,%sycl_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=opencl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%mlir_c_runner_utils,%opencl_runtime --filecheck
#map0 = affine_map<(d0, d1) -> (d0, d1)>
#map1 = affine_map<(d0, d1, d2) -> (d0, d2)>
#map2 = affine_map<(d0, d1, d2) -> (d2, d1)>
#map3 = affine_map<(d0, d1, d2) -> (d0, d1)>
#map_convert = affine_map<(d0, d1) -> (d0, d1)>
module @dot_f16_acc_f32 {
func.func @test(%arg0: tensor<8x16x@DTYPE@>, %arg1: tensor<16x32x@DTYPE@>) -> tensor<8x32x@DTYPE@> {
    %cst = arith.constant 0.000000e+00 : f32
    %0 = tensor.empty() : tensor<8x16xf32>
    %1 = linalg.generic {indexing_maps = [#map0, #map0], iterator_types = ["parallel", "parallel"]} ins(%arg0 : tensor<8x16x@DTYPE@>) outs(%0 : tensor<8x16xf32>) {
    ^bb0(%arg2: @DTYPE@, %arg3: f32):
      %9 = arith.extf %arg2 : @DTYPE@ to f32
      linalg.yield %9 : f32
    } -> tensor<8x16xf32>
    %2 = tensor.empty() : tensor<16x32xf32>
    %3 = linalg.generic {indexing_maps = [#map0, #map0], iterator_types = ["parallel", "parallel"]} ins(%arg1 : tensor<16x32x@DTYPE@>) outs(%2 : tensor<16x32xf32>) {
    ^bb0(%arg2: @DTYPE@, %arg3: f32):
      %9 = arith.extf %arg2 : @DTYPE@ to f32
      linalg.yield %9 : f32
    } -> tensor<16x32xf32>
    %4 = tensor.empty() : tensor<8x32xf32>
    %5 = linalg.fill ins(%cst : f32) outs(%4 : tensor<8x32xf32>) -> tensor<8x32xf32>
    %6 = linalg.generic {indexing_maps = [#map1, #map2, #map3], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1, %3 : tensor<8x16xf32>, tensor<16x32xf32>) outs(%5 : tensor<8x32xf32>) attrs =  {iterator_ranges = [8, 32, 16]} {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %9 = arith.mulf %arg2, %arg3 : f32
      %10 = arith.addf %arg4, %9 : f32
      linalg.yield %10 : f32
    } -> tensor<8x32xf32>
    %7 = tensor.empty() : tensor<8x32x@DTYPE@>
    %8 = linalg.generic {indexing_maps = [#map0, #map0], iterator_types = ["parallel", "parallel"]} ins(%6 : tensor<8x32xf32>) outs(%7 : tensor<8x32x@DTYPE@>) {
    ^bb0(%arg2: f32, %arg3: @DTYPE@):
      %9 = arith.truncf %arg2 : f32 to @DTYPE@
      linalg.yield %9 : @DTYPE@
    } -> tensor<8x32x@DTYPE@>
    return %8 : tensor<8x32x@DTYPE@>
  }
  func.func @main() {
    %0 = arith.constant dense<1.0> : tensor<8x16x@DTYPE@>
    %1 = arith.constant dense<2.0> : tensor<16x32x@DTYPE@>
    %2 = call @test(%0, %1) : (tensor<8x16x@DTYPE@>, tensor<16x32x@DTYPE@>) -> tensor<8x32x@DTYPE@>
    %3 = tensor.extract_slice %2[0, 0][2, 32][1, 1] : tensor<8x32x@DTYPE@> to tensor<2x32x@DTYPE@>
    %unranked = tensor.cast %3 : tensor<2x32x@DTYPE@> to tensor<*x@DTYPE@>
    %ref = arith.constant dense<[[32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0,32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0,32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0,32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0],
                                 [32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0,32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0,32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0,32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0]]>:tensor<2x32xf32>
    %unranked_ref = tensor.cast %ref : tensor<2x32xf32>to tensor<*xf32>
    call @CHECKDTYPE@(%unranked, %unranked_ref) : (tensor<*x@DTYPE@>, tensor<*xf32>) -> ()
    return
    // CHECK:   [ALLCLOSE: TRUE]
  }
  func.func private @CHECKDTYPE@(tensor<*x@DTYPE@>, tensor<*xf32>)
}
