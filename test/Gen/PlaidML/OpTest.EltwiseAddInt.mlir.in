// NUMPLACEHOLDERS 2 NUMVARIANTS 4
// PLACEHOLDER DTYPE i64 i32 i16 i8
// PLACEHOLDER PRINTDTYPE @printMemrefI64 @printMemrefI32 @printMemrefI16 @printMemrefI8
// RUN: %python_executable %imex_runner -i %s --pass-pipeline-file=%p/linalg-to-cpu.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --shared-libs=%mlir_runner_utils,%irunner_utils \
// RUN:                                       --entry-point-result=void --filecheck
// RUN: %python_executable %imex_runner --requires=l0-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --entry-point-result=void \
// RUN:                                       --shared-libs=%mlir_runner_utils,%irunner_utils,%levelzero_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=sycl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%irunner_utils,%sycl_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=opencl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%irunner_utils,%opencl_runtime --filecheck
#map = affine_map<(d0, d1) -> (d0, d1)>
module @eltwise_add {
  func.func @test(%arg0: tensor<10x20x@DTYPE@>, %arg1: tensor<10x20x@DTYPE@>) -> tensor<10x20x@DTYPE@> {
    %0 = tensor.empty() : tensor<10x20x@DTYPE@>
    %1 = linalg.generic {
            indexing_maps = [#map, #map, #map],
            iterator_types = ["parallel", "parallel"]
         }
         ins(%arg0, %arg1 : tensor<10x20x@DTYPE@>, tensor<10x20x@DTYPE@>)
         outs(%0 : tensor<10x20x@DTYPE@>) {
            ^bb0(%arg2: @DTYPE@, %arg3: @DTYPE@, %arg4: @DTYPE@):
              %2 = arith.addi %arg2, %arg3 : @DTYPE@
              linalg.yield %2 : @DTYPE@
         } -> tensor<10x20x@DTYPE@>
    return %1 : tensor<10x20x@DTYPE@>
  }

  func.func @main() {
    %0 = arith.constant dense<[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
                               [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
                              ]> : tensor<10x20x@DTYPE@>
    %1 = arith.constant dense<1> : tensor<10x20x@DTYPE@>
    %2 = call @test(%0, %1) : (tensor<10x20x@DTYPE@>, tensor<10x20x@DTYPE@>) -> tensor<10x20x@DTYPE@>
    %unranked = tensor.cast %2 : tensor<10x20x@DTYPE@> to tensor<*x@DTYPE@>
    %ref = arith.constant dense<[
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                               [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
                                ]>:tensor<10x20xi32>
    %unranked_ref = tensor.cast %ref : tensor<10x20xi32>to tensor<*xi32>
    call @PRINTDTYPE@(%unranked) : (tensor<*x@DTYPE@>) -> ()
    return
}
func.func private @PRINTDTYPE@(tensor<*x@DTYPE@>)
}
// CHECK: Unranked Memref base@ = {{0x[-9a-f]*}}
// CHECK:   [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
