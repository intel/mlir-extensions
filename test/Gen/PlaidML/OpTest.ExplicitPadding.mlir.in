// NUMPLACEHOLDERS 3 NUMVARIANTS 3
// PLACEHOLDER DTYPE f32 f16 bf16
// PLACEHOLDER PRINTDTYPE @printMemrefF32 @printMemrefF16 @printMemrefBF16
// PLACEHOLDER CHECKDTYPE @printAllcloseF32 @printAllcloseF16 @printAllcloseBF16
// RUN: %python_executable %imex_runner -i %s --pass-pipeline-file=%p/linalg-to-cpu.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --shared-libs=%mlir_runner_utils,%irunner_utils \
// RUN:                                       --entry-point-result=void --filecheck
// RUN: %python_executable %imex_runner --requires=l0-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                       --runner imex-cpu-runner -e main \
// RUN:                                       --entry-point-result=void \
// RUN:                                       --shared-libs=%mlir_runner_utils,%irunner_utils,%levelzero_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=sycl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%irunner_utils,%sycl_runtime --filecheck
// RUN: %python_executable %imex_runner --requires=opencl-runtime -i %s --pass-pipeline-file=%p/linalg-to-llvm.pp \
// RUN:                                        --runner imex-cpu-runner -e main \
// RUN:                                        --entry-point-result=void \
// RUN:                                        --shared-libs=%mlir_runner_utils,%irunner_utils,%opencl_runtime --filecheck
#map0 = affine_map<(d0, d1) -> (d0, d1)>
#map1 = affine_map<(d0, d1) -> (d0 + 2, d1 + 1)>
module @explicit_padding {
func.func @main() {
    %0= arith.constant dense<[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]>:tensor<2x3x@DTYPE@>
    %1 = call @test(%0) : (tensor<2x3x@DTYPE@>) -> tensor<6x5x@DTYPE@>
    %unranked = tensor.cast %1 : tensor<6x5x@DTYPE@>to tensor<*x@DTYPE@>
    %ref = arith.constant dense<[
                                 [0.0, 0.0, 0.0, 0.0, 0.0],
                                 [0.0, 0.0, 0.0, 0.0, 0.0],
                                 [0.0, 1.0, 2.0, 3.0, 0.0],
                                 [0.0, 4.0, 5.0, 6.0, 0.0],
                                 [0.0, 0.0, 0.0, 0.0, 0.0],
                                 [0.0, 0.0, 0.0, 0.0, 0.0]
                                ]>:tensor<6x5xf32>
    %unranked_ref = tensor.cast %ref : tensor<6x5xf32>to tensor<*xf32>
    call @CHECKDTYPE@(%unranked, %unranked_ref) : (tensor<*x@DTYPE@>, tensor<*xf32>) -> ()
    call @PRINTDTYPE@(%unranked) : (tensor<*x@DTYPE@>) -> ()
    return
}
// CHECK:   [ALLCLOSE: TRUE]
func.func private @PRINTDTYPE@(tensor<*x@DTYPE@>)
func.func private @CHECKDTYPE@(tensor<*x@DTYPE@>, tensor<*xf32>)
func.func @test(%arg0: tensor<2x3x@DTYPE@>)->tensor<6x5x@DTYPE@>{
    %cst = arith.constant 0.0 : @DTYPE@
    %0 = tensor.empty() : tensor<6x5x@DTYPE@>
    %1 = linalg.fill ins(%cst : @DTYPE@) outs(%0 : tensor<6x5x@DTYPE@>) -> tensor<6x5x@DTYPE@>

    %2 = linalg.generic {
        indexing_maps = [#map0, #map1],
        iterator_types = ["parallel", "parallel"]
      }
      ins(%arg0 : tensor<2x3x@DTYPE@>) outs(%1 : tensor<6x5x@DTYPE@>)
      attrs =  {iterator_ranges = [2, 3], name = "explicit_padding"} {
        ^bb0(%arg1: @DTYPE@, %arg2: @DTYPE@):
          %e = arith.addf %arg1, %arg2: @DTYPE@ // enforce arg2 is used, otherwise a new tensor is allocated
          %o = arith.subf %e, %cst: @DTYPE@
          linalg.yield %o: @DTYPE@
      } -> tensor<6x5x@DTYPE@>
    return %2 : tensor<6x5x@DTYPE@>
  }
}
