From a520973addcbb2eefba9b9b37c1a43db64baaf50 Mon Sep 17 00:00:00 2001
From: Md Abdullah Shahneous Bari <md.abdullah.shahneous.bari@intel.com>
Date: Fri, 26 Apr 2024 20:55:18 +0000
Subject: [PATCH 5/7] Update the Joint Matrix support to match IGC spec

Update the Joint Matrix support to match the following spec:
https://github.com/MrSidims/llvm/blob/private/MrSidims/add-matrix-use/sycl/doc/design/spirv-extensions/SPV_INTEL_joint_matrix.asciidoc
---
 .../mlir/Dialect/SPIRV/IR/SPIRVBase.td        | 31 +++++++++++++------
 .../mlir/Dialect/SPIRV/IR/SPIRVTypes.h        |  6 +++-
 mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp    | 12 +++++--
 mlir/lib/Dialect/SPIRV/IR/SPIRVTypes.cpp      | 20 ++++++++----
 .../SPIRV/Deserialization/Deserializer.cpp    | 17 +++++++---
 .../Target/SPIRV/Serialization/Serializer.cpp |  3 +-
 mlir/tools/mlir-tblgen/SPIRVUtilsGen.cpp      |  2 +-
 7 files changed, 66 insertions(+), 25 deletions(-)

diff --git a/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVBase.td b/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVBase.td
index 75e42c024553..91a8bb51ad65 100644
--- a/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVBase.td
+++ b/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVBase.td
@@ -4032,15 +4032,28 @@ def SPIRV_SamplerUseAttr: SPIRV_I32EnumAttr<
   "image_sampler_use_info",
   [SPIRV_ISUI_SamplerUnknown, SPIRV_ISUI_NeedSampler, SPIRV_ISUI_NoSampler]>;

-def SPIRV_ML_ColumnMajor : I32EnumAttrCase<"ColumnMajor", 0>;
-def SPIRV_ML_RowMajor    : I32EnumAttrCase<"RowMajor", 1>;
-def SPIRV_ML_PackedA     : I32EnumAttrCase<"PackedA", 2>;
-def SPIRV_ML_PackedB     : I32EnumAttrCase<"PackedB", 3>;
-
-def SPIRV_MatrixLayoutAttr :
-    SPIRV_I32EnumAttr<"MatrixLayout", "valid SPIR-V MatrixLayout", "matrixLayout", [
-      SPIRV_ML_ColumnMajor, SPIRV_ML_RowMajor, SPIRV_ML_PackedA, SPIRV_ML_PackedB
-    ]>;
+// Change the layout parameter to IGC spec, the currnet MLIR version
+// does not match the IGC spec, IGC spec has been updated
+// https://github.com/MrSidims/llvm/blob/private/MrSidims/add-matrix-use/sycl/doc/design/spirv-extensions/SPV_INTEL_joint_matrix.asciidoc
+
+def SPIRV_ML_RowMajor     : I32EnumAttrCase<"RowMajor", 0>;
+def SPIRV_ML_ColumnMajor  : I32EnumAttrCase<"ColumnMajor", 1>;
+def SPIRV_ML_Packed       : I32EnumAttrCase<"Packed", 2>;
+def SPIRV_ML_Unused     : I32EnumAttrCase<"Unused", 3>;
+
+ def SPIRV_MatrixLayoutAttr  :
+     SPIRV_I32EnumAttr<"MatrixLayout", "valid SPIR-V MatrixLayout", "matrixLayout", [
+     SPIRV_ML_RowMajor, SPIRV_ML_ColumnMajor, SPIRV_ML_Packed, SPIRV_ML_Unused
+     ]>;
+
+def SPIRV_ML_MATRIX_A     : I32EnumAttrCase<"MatrixA", 0>;
+def SPIRV_ML_MATRIX_B     : I32EnumAttrCase<"MatrixB", 1>;
+def SPIRV_ML_MATRIX_ACC   : I32EnumAttrCase<"Accumulator", 2>;
+
+def SPIRV_MatrixUseAttr  :
+    SPIRV_I32EnumAttr<"MatrixUse", "valid SPIR-V MatrixUse", "matrixUse", [
+      SPIRV_ML_MATRIX_A, SPIRV_ML_MATRIX_B, SPIRV_ML_MATRIX_ACC
+     ]>;

 // Cooperative Matrix Use for the SPV_KHR_cooperative_matrix extension.
 def SPIRV_KHR_CMU_MatrixA   : I32EnumAttrCase<"MatrixA", 0>;
diff --git a/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVTypes.h b/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVTypes.h
index 55f0c787b444..744ea1aa21ef 100644
--- a/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVTypes.h
+++ b/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVTypes.h
@@ -430,7 +430,8 @@ public:
   static constexpr StringLiteral name = "spirv.jointmatrix";

   static JointMatrixINTELType get(Type elementType, Scope scope, unsigned rows,
-                                  unsigned columns, MatrixLayout matrixLayout);
+                                  unsigned columns, MatrixLayout matrixLayout,
+                                  MatrixUse matrixUse);
   Type getElementType() const;

   /// Return the scope of the joint matrix.
@@ -443,6 +444,9 @@ public:
   /// return the layout of the matrix
   MatrixLayout getMatrixLayout() const;

+  /// return the use of the matrix
+  MatrixUse getMatrixUse() const;
+
   void getExtensions(SPIRVType::ExtensionArrayRefVector &extensions,
                      std::optional<StorageClass> storage = std::nullopt);
   void getCapabilities(SPIRVType::CapabilityArrayRefVector &capabilities,
diff --git a/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp b/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp
index b38f20458d32..65aaafa55386 100644
--- a/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp
+++ b/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp
@@ -367,7 +367,8 @@ static Type parseCooperativeMatrixType(SPIRVDialect const &dialect,

 // joint-matrix-type ::= `!spirv.jointmatrix` `<`rows `x` columns `x`
 // element-type
-//                                                       `,` layout `,` scope`>`
+//                                                       `,` layout `,` scope
+//                                                       `,` use`>`
 static Type parseJointMatrixType(SPIRVDialect const &dialect,
                                  DialectAsmParser &parser) {
   if (parser.parseLess())
@@ -394,10 +395,14 @@ static Type parseJointMatrixType(SPIRVDialect const &dialect,
   if (parser.parseComma() ||
       spirv::parseEnumKeywordAttr(scope, parser, "scope <id>"))
     return Type();
+  MatrixUse matrixUse;
+  if (parser.parseComma() ||
+      parseEnumKeywordAttr(matrixUse, parser, "matrixUse <id>"))
+    return Type();
   if (parser.parseGreater())
     return Type();
   return JointMatrixINTELType::get(elementTy, scope, dims[0], dims[1],
-                                   matrixLayout);
+                                   matrixLayout, matrixUse);
 }

 // TODO: Reorder methods to be utilities first and parse*Type
@@ -893,7 +898,8 @@ static void print(JointMatrixINTELType type, DialectAsmPrinter &os) {
   os << "jointmatrix<" << type.getRows() << "x" << type.getColumns() << "x";
   os << type.getElementType() << ", "
      << stringifyMatrixLayout(type.getMatrixLayout());
-  os << ", " << stringifyScope(type.getScope()) << ">";
+  os << ", " << stringifyScope(type.getScope()) << ", "
+     << stringifyMatrixUse(type.getMatrixUse()) << ">";
 }

 static void print(MatrixType type, DialectAsmPrinter &os) {
diff --git a/mlir/lib/Dialect/SPIRV/IR/SPIRVTypes.cpp b/mlir/lib/Dialect/SPIRV/IR/SPIRVTypes.cpp
index 2d64fea0dc26..c9ecfcc5e137 100644
--- a/mlir/lib/Dialect/SPIRV/IR/SPIRVTypes.cpp
+++ b/mlir/lib/Dialect/SPIRV/IR/SPIRVTypes.cpp
@@ -287,7 +287,8 @@ void CooperativeMatrixType::getCapabilities(
 //===----------------------------------------------------------------------===//

 struct spirv::detail::JointMatrixTypeStorage : public TypeStorage {
-  using KeyTy = std::tuple<Type, unsigned, unsigned, MatrixLayout, Scope>;
+  using KeyTy =
+      std::tuple<Type, unsigned, unsigned, MatrixLayout, Scope, MatrixUse>;

   static JointMatrixTypeStorage *construct(TypeStorageAllocator &allocator,
                                            const KeyTy &key) {
@@ -296,26 +297,29 @@ struct spirv::detail::JointMatrixTypeStorage : public TypeStorage {
   }

   bool operator==(const KeyTy &key) const {
-    return key == KeyTy(elementType, rows, columns, matrixLayout, scope);
+    return key ==
+           KeyTy(elementType, rows, columns, matrixLayout, scope, matrixUse);
   }

   JointMatrixTypeStorage(const KeyTy &key)
       : elementType(std::get<0>(key)), rows(std::get<1>(key)),
-        columns(std::get<2>(key)), scope(std::get<4>(key)),
-        matrixLayout(std::get<3>(key)) {}
+        columns(std::get<2>(key)), matrixLayout(std::get<3>(key)),
+        scope(std::get<4>(key)), matrixUse(std::get<5>(key)) {}

   Type elementType;
   unsigned rows;
   unsigned columns;
   Scope scope;
   MatrixLayout matrixLayout;
+  MatrixUse matrixUse;
 };

 JointMatrixINTELType JointMatrixINTELType::get(Type elementType, Scope scope,
                                                unsigned rows, unsigned columns,
-                                               MatrixLayout matrixLayout) {
+                                               MatrixLayout matrixLayout,
+                                               MatrixUse matrixUse) {
   return Base::get(elementType.getContext(), elementType, rows, columns,
-                   matrixLayout, scope);
+                   matrixLayout, scope, matrixUse);
 }

 Type JointMatrixINTELType::getElementType() const {
@@ -332,6 +336,10 @@ MatrixLayout JointMatrixINTELType::getMatrixLayout() const {
   return getImpl()->matrixLayout;
 }

+MatrixUse JointMatrixINTELType::getMatrixUse() const {
+  return getImpl()->matrixUse;
+}
+
 void JointMatrixINTELType::getExtensions(
     SPIRVType::ExtensionArrayRefVector &extensions,
     std::optional<StorageClass> storage) {
diff --git a/mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp b/mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp
index bc0ca11f4e16..ef6e22aff12e 100644
--- a/mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp
+++ b/mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp
@@ -1026,7 +1026,7 @@ LogicalResult spirv::Deserializer::processCooperativeMatrixTypeKHR(

 LogicalResult
 spirv::Deserializer::processJointMatrixType(ArrayRef<uint32_t> operands) {
-  if (operands.size() != 6) {
+  if (operands.size() != 7) {
     return emitError(unknownLoc, "OpTypeJointMatrix must have element "
                                  "type and row x column parameters");
   }
@@ -1037,6 +1037,14 @@ spirv::Deserializer::processJointMatrixType(ArrayRef<uint32_t> operands) {
            << operands[1];
   }

+  auto matrixUse =
+      spirv::symbolizeMatrixUse(getConstantInt(operands[6]).getInt());
+  if (!matrixUse) {
+    return emitError(unknownLoc,
+                     "OpTypeJointMatrix references undefined Use <id> ")
+           << operands[6];
+  }
+
   auto scope = spirv::symbolizeScope(getConstantInt(operands[5]).getInt());
   if (!scope) {
     return emitError(unknownLoc,
@@ -1047,14 +1055,15 @@ spirv::Deserializer::processJointMatrixType(ArrayRef<uint32_t> operands) {
       spirv::symbolizeMatrixLayout(getConstantInt(operands[4]).getInt());
   if (!matrixLayout) {
     return emitError(unknownLoc,
-                     "OpTypeJointMatrix references undefined scope <id> ")
+                     "OpTypeJointMatrix references undefined Layout <id> ")
            << operands[4];
   }
   unsigned rows = getConstantInt(operands[2]).getInt();
   unsigned columns = getConstantInt(operands[3]).getInt();

-  typeMap[operands[0]] = spirv::JointMatrixINTELType::get(
-      elementTy, scope.value(), rows, columns, matrixLayout.value());
+  typeMap[operands[0]] =
+      spirv::JointMatrixINTELType::get(elementTy, scope.value(), rows, columns,
+                                       matrixLayout.value(), matrixUse.value());
   return success();
 }

diff --git a/mlir/lib/Target/SPIRV/Serialization/Serializer.cpp b/mlir/lib/Target/SPIRV/Serialization/Serializer.cpp
index 34427458d6c1..bdf786ff0afd 100644
--- a/mlir/lib/Target/SPIRV/Serialization/Serializer.cpp
+++ b/mlir/lib/Target/SPIRV/Serialization/Serializer.cpp
@@ -675,7 +675,8 @@ LogicalResult Serializer::prepareBasicType(
         operands, elementTypeID, getConstantOp(jointMatrixType.getRows()),
         getConstantOp(jointMatrixType.getColumns()),
         getConstantOp(static_cast<uint32_t>(jointMatrixType.getMatrixLayout())),
-        getConstantOp(static_cast<uint32_t>(jointMatrixType.getScope())));
+        getConstantOp(static_cast<uint32_t>(jointMatrixType.getScope())),
+        getConstantOp(static_cast<uint32_t>(jointMatrixType.getMatrixUse())));
     return success();
   }

diff --git a/mlir/tools/mlir-tblgen/SPIRVUtilsGen.cpp b/mlir/tools/mlir-tblgen/SPIRVUtilsGen.cpp
index 9aeb14d14eec..d54b267bea47 100644
--- a/mlir/tools/mlir-tblgen/SPIRVUtilsGen.cpp
+++ b/mlir/tools/mlir-tblgen/SPIRVUtilsGen.cpp
@@ -523,7 +523,7 @@ static mlir::GenRegistration
 constexpr llvm::StringLiteral constantIdEnumAttrs[] = {
     "SPIRV_ScopeAttr", "SPIRV_KHR_CooperativeMatrixUseAttr",
     "SPIRV_KHR_CooperativeMatrixLayoutAttr", "SPIRV_MemorySemanticsAttr",
-    "SPIRV_MatrixLayoutAttr"};
+    "SPIRV_MatrixLayoutAttr", "SPIRV_MatrixUseAttr"};

 /// Generates code to serialize attributes of a SPIRV_Op `op` into `os`. The
 /// generates code extracts the attribute with name `attrName` from
--
2.34.1
