From a18280b49a33d421477db322d642aff187b029f8 Mon Sep 17 00:00:00 2001
From: Dimple Prajapati <dimpalben.r.prajapati@intel.com>
Date: Tue, 7 May 2024 23:26:34 +0000
Subject: [PATCH] Add SPIRV_ExecutionModeAttributesAttr

add spirv.ExecutionMode Op during GPUToSPIRV Pass lowering
---
 .../mlir/Dialect/SPIRV/IR/SPIRVAttributes.td   | 11 +++++++++++
 .../mlir/Dialect/SPIRV/IR/TargetAndABI.h       |  8 ++++++++
 mlir/lib/Conversion/GPUToSPIRV/GPUToSPIRV.cpp  | 14 ++++++++++++++
 mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp     |  4 ++++
 mlir/lib/Dialect/SPIRV/IR/TargetAndABI.cpp     | 18 ++++++++++++++++++
 5 files changed, 55 insertions(+)

diff --git a/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVAttributes.td b/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVAttributes.td
index 3a11284da051..1267ecd251ae 100644
--- a/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVAttributes.td
+++ b/mlir/include/mlir/Dialect/SPIRV/IR/SPIRVAttributes.td
@@ -56,6 +56,17 @@ def SPIRV_LinkageAttributesAttr : SPIRV_Attr<"LinkageAttributes", "linkage_attri
   let assemblyFormat = "`<` struct(params) `>`";
 }

+// This attribute specifies SPIR-V execution mode information via GPU functions
+// 1) Execution mode attribute.
+// 2) [optional] Execution mode value.
+def SPIRV_ExecutionModeFuncAttributeAttr : SPIRV_Attr<"ExecutionModeFuncAttribute", "execution_mode_func_attribute"> {
+  let parameters = (ins
+    "mlir::spirv::ExecutionModeAttr":$execution_mode,
+    OptionalParameter<"std::optional<uint32_t>">:$value
+  );
+  let assemblyFormat = "`<` struct(params) `>`";
+}
+
 // Description of cooperative matrix operations supported on the
 // target. Represents `VkCooperativeMatrixPropertiesKHR`. See
 // https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkCooperativeMatrixPropertiesKHR.html
diff --git a/mlir/include/mlir/Dialect/SPIRV/IR/TargetAndABI.h b/mlir/include/mlir/Dialect/SPIRV/IR/TargetAndABI.h
index 24574bfaf619..f64f99294038 100644
--- a/mlir/include/mlir/Dialect/SPIRV/IR/TargetAndABI.h
+++ b/mlir/include/mlir/Dialect/SPIRV/IR/TargetAndABI.h
@@ -137,6 +137,14 @@ FailureOr<ExecutionModel> getExecutionModel(TargetEnvAttr targetAttr);
 /// Returns failure if it cannot be selected.
 FailureOr<MemoryModel> getMemoryModel(TargetEnvAttr targetAttr);

+/// Returns the attribute name for specifying execution mode attribute
+/// information.
+StringRef getExecutionModeFuncAttrName();
+
+/// Queries the Execution Mode Attribute on the nearest function-like op
+/// containing the given `op`. Returns null attribute if not found.
+ExecutionModeFuncAttributeAttr lookupExecModeFuncAttr(Operation *op);
+
 } // namespace spirv
 } // namespace mlir

diff --git a/mlir/lib/Conversion/GPUToSPIRV/GPUToSPIRV.cpp b/mlir/lib/Conversion/GPUToSPIRV/GPUToSPIRV.cpp
index d7885e035959..5195035f088f 100644
--- a/mlir/lib/Conversion/GPUToSPIRV/GPUToSPIRV.cpp
+++ b/mlir/lib/Conversion/GPUToSPIRV/GPUToSPIRV.cpp
@@ -343,6 +343,20 @@ LogicalResult GPUFuncOpConversion::matchAndRewrite(
     return failure();
   newFuncOp->removeAttr(
       rewriter.getStringAttr(gpu::GPUDialect::getKernelFuncAttrName()));
+
+  auto execModeFuncAttr = spirv::lookupExecModeFuncAttr(funcOp);
+  if (execModeFuncAttr) {
+    spirv::ExecutionModeAttr executionMode =
+        execModeFuncAttr.getExecutionMode();
+    std::optional<uint32_t> modeVal = execModeFuncAttr.getValue();
+
+    OpBuilder::InsertionGuard guard(rewriter);
+    rewriter.setInsertionPointAfter(newFuncOp);
+
+    rewriter.create<spirv::ExecutionModeOp>(funcOp.getLoc(), newFuncOp,
+                                            executionMode.getValue(), *modeVal);
+  }
+
   return success();
 }

diff --git a/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp b/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp
index 65aaafa55386..b9f906ada3ee 100644
--- a/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp
+++ b/mlir/lib/Dialect/SPIRV/IR/SPIRVDialect.cpp
@@ -948,6 +948,10 @@ LogicalResult SPIRVDialect::verifyOperationAttribute(Operation *op,
   } else if (symbol == spirv::getTargetEnvAttrName()) {
     if (!llvm::isa<spirv::TargetEnvAttr>(attr))
       return op->emitError("'") << symbol << "' must be a spirv::TargetEnvAttr";
+  } else if (symbol == spirv::getExecutionModeFuncAttrName()) {
+    if (!llvm::isa<spirv::ExecutionModeFuncAttributeAttr>(attr))
+      return op->emitError("'")
+             << symbol << "' must be a spirv::ExecutionModeFuncAttributeAttr";
   } else {
     return op->emitError("found unsupported '")
            << symbol << "' attribute on operation";
diff --git a/mlir/lib/Dialect/SPIRV/IR/TargetAndABI.cpp b/mlir/lib/Dialect/SPIRV/IR/TargetAndABI.cpp
index bbc318e17300..56251a8f3990 100644
--- a/mlir/lib/Dialect/SPIRV/IR/TargetAndABI.cpp
+++ b/mlir/lib/Dialect/SPIRV/IR/TargetAndABI.cpp
@@ -242,3 +242,21 @@ spirv::getMemoryModel(spirv::TargetEnvAttr targetAttr) {
   }
   return failure();
 }
+
+StringRef spirv::getExecutionModeFuncAttrName() {
+  return "spirv.execution_mode";
+}
+
+spirv::ExecutionModeFuncAttributeAttr
+spirv::lookupExecModeFuncAttr(Operation *op) {
+  while (op && !isa<FunctionOpInterface>(op))
+    op = op->getParentOp();
+  if (!op)
+    return {};
+
+  if (auto attr = op->getAttrOfType<spirv::ExecutionModeFuncAttributeAttr>(
+          spirv::getExecutionModeFuncAttrName()))
+    return attr;
+
+  return {};
+}
--
2.34.1
