From 910b158b0e1c97a8e75906086c7dce25a63afa50 Mon Sep 17 00:00:00 2001
From: izamyati <igor.zamyatin@intel.com>
Date: Fri, 25 Oct 2024 16:11:59 -0500
Subject: [PATCH 1/1] xegpu temporary downstream defintion changes and
 vectortoxegpu patch

---
 mlir/include/mlir/Dialect/XeGPU/IR/XeGPUOps.td      | 6 ++++++
 mlir/lib/Conversion/VectorToXeGPU/VectorToXeGPU.cpp | 2 ++
 mlir/lib/Dialect/XeGPU/IR/XeGPUOps.cpp              | 2 +-
 3 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUOps.td b/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUOps.td
index 239ce0aa8e00..812d2d167297 100644
--- a/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUOps.td
+++ b/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUOps.td
@@ -302,6 +302,7 @@ def XeGPU_LoadNdOp : XeGPU_Op<"load_nd", [AllElementTypesMatch<["value", "Tensor
   let arguments = (ins XeGPU_TensorDesc: $TensorDesc,
                        OptionalAttr<UnitAttr>: $packed,
                        OptionalAttr<DenseI64ArrayAttr>: $transpose,
+                       OptionalAttr<I32Attr>: $transpose_bit_width,
                        OptionalAttr<XeGPU_CacheHintAttr>: $l1_hint,
                        OptionalAttr<XeGPU_CacheHintAttr>: $l2_hint,
                        OptionalAttr<XeGPU_CacheHintAttr>: $l3_hint);
@@ -871,4 +872,9 @@ def XeGPU_FenceOp: XeGPU_Op<"fence", []> {
   let extraClassDeclaration = extraBaseClassDeclaration;
 }

+def XeGPU_CompileHintOp : XeGPU_Op<"compile_hint", []> {
+  let summary = "prevents the compiler from scheduling.";
+  let assemblyFormat = [{ attr-dict }];
+}
+
 #endif // MLIR_DIALECT_XEGPU_IR_XEGPUOPS_TD
diff --git a/mlir/lib/Conversion/VectorToXeGPU/VectorToXeGPU.cpp b/mlir/lib/Conversion/VectorToXeGPU/VectorToXeGPU.cpp
index 215e1b1b8745..c05a9e2b86f5 100644
--- a/mlir/lib/Conversion/VectorToXeGPU/VectorToXeGPU.cpp
+++ b/mlir/lib/Conversion/VectorToXeGPU/VectorToXeGPU.cpp
@@ -199,6 +199,7 @@ struct TransferReadLowering : public OpRewritePattern<vector::TransferReadOp> {
     xegpu::CachePolicyAttr hint = nullptr;
     auto loadOp = rewriter.create<xegpu::LoadNdOp>(
         loc, vecTy, ndDesc, /*packed=*/nullptr, transposeAttr,
+        /*transpose_bit_width*/nullptr,
         /*l1_hint=*/hint,
         /*l2_hint=*/hint, /*l3_hint=*/hint);
     rewriter.replaceOp(readOp, loadOp);
@@ -265,6 +266,7 @@ struct LoadLowering : public OpRewritePattern<vector::LoadOp> {
     xegpu::CachePolicyAttr hint = nullptr;
     auto loadNdOp = rewriter.create<xegpu::LoadNdOp>(
         loc, vecTy, ndDesc, /*packed=*/nullptr, /*transpose=*/nullptr,
+        /*transpose_bit_width*/nullptr,
         /*l1_hint=*/hint,
         /*l2_hint=*/hint, /*l3_hint=*/hint);
     rewriter.replaceOp(loadOp, loadNdOp);
diff --git a/mlir/lib/Dialect/XeGPU/IR/XeGPUOps.cpp b/mlir/lib/Dialect/XeGPU/IR/XeGPUOps.cpp
index 5bd3c370e385..898e8564e3fe 100644
--- a/mlir/lib/Dialect/XeGPU/IR/XeGPUOps.cpp
+++ b/mlir/lib/Dialect/XeGPU/IR/XeGPUOps.cpp
@@ -237,7 +237,7 @@ LogicalResult LoadNdOp::verify() {
       emitWarning("Invalid transpose attr. It is ignored.");
   }

-  if (getPacked()) {
+  if (getPacked() || getTransposeBitWidth() == 32) {
     if (tdescTy.getRank() == 2) {
       const int axis = 0;
       auto vnni_factor = valueShape.back();
--
2.34.1
