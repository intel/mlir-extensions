#===- imex-runner.py ----------------------------------------*- Python -*-===#
#
# Copyright 2023 Intel Corporation
# This file is licensed under the Apache License v2.0 with LLVM Exceptions.
# See https:#llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===----------------------------------------------------------------------===#
#
# This file defines a runner for imex.
#
#===----------------------------------------------------------------------===#

"""
Run a mlir file through imex-opt using a user provided pass pipeline
and optionally(On by default and turned off by option --no-mlir-runner)
run resulting output through an mlir runner
(Default is imex-cpu-runner and can be overridden by option --runner).
After that, optionally(Option --filecheck), output can be passed to FileCheck utility.
The pass pipeline for imex-opt is provided either in a file or as a string; expected
syntax is similar to mlir-opt's syntax.

If provided in a file passes can be separted by newline or ',' and
trailing/leading whitespaces will be eliminated.

Example: the following specs are equivalent:
string or content of file:
`func.func(scf-bufferize,shape-bufferize)`
content of file:
```
func.func(scf-bufferize,
          shape-bufferize)
```

Pass pipelines privded as strings will not be modified.

All unknown arguments will be forwarded to mlir-runner. Currently there is no
option to forward user-provided args directly to imex-opt.
Options --imex-print-before-all and --imex-print-after-all gets converted
into --mlir-print-ir-before-all, --mlir-print-ir-after-all and forwarded to
imex-opt to enable printing IR before and after running passes.
Option --check-prefix gets forwarded to FileCheck.

To use this in a lit test, you can do something similar to
`// RUN: %python_executable %imex-runner -i %s --pass-pipeline-file=%p/ndarray.pp -e main -entry-point-result=void --shared-libs=%mlir_c_runner_utils,%mlir_runner_utils --filecheck`
"""

import os, sys, re
from os.path import join as jp
import argparse
import subprocess

imex_enable_vulkan_runner = @IMEX_ENABLE_VULKAN_RUNNER@
imex_enable_l0_runtime = @IMEX_ENABLE_L0_RUNTIME@
imex_enable_sycl_runtime = @IMEX_ENABLE_SYCL_RUNTIME@
imex_enable_opencl_runtime = @IMEX_ENABLE_OPENCL_RUNTIME@

runner_choices = ['imex-cpu-runner']
enabled_features = []
all_features = ['vulkan-runner', 'l0-runtime', 'sycl-runtime', 'opencl-runtime', 'igpu-fp64']
if imex_enable_vulkan_runner:
    runner_choices.append('mlir-vulkan-runner')
    enabled_features.append('vulkan-runner')
if imex_enable_l0_runtime:
    enabled_features.append('l0-runtime')
if imex_enable_sycl_runtime:
    enabled_features.append('sycl-runtime')
if imex_enable_opencl_runtime:
    enabled_features.append('opencl-runtime')

class SplitArgs(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values.split(','))

parser = argparse.ArgumentParser(
    description="Run imex-opt, optionally pipe result into selected mlir runner (default: imex-cpu-runner) and then optionally pipe output into FileCheck"
)
parser.add_argument("--input-file", "-i", default=None, help="input MLIR file")
parser.add_argument("--output-file", "-o", default=None, help="output MLIR file")
parser.add_argument("--pass-pipeline-file", "-f", default=None, help="file defining pass pipeline")
parser.add_argument("--pass-pipeline", "-p", default=None, help="pass pipeline (string)")
parser.add_argument("--imex-print-before-all", "-b", action='store_true', dest='before', help="print ir before all passes")
parser.add_argument("--imex-print-after-all", "-a", action='store_true', dest='after', help="print ir after all passes")
parser.add_argument("--no-mlir-runner", "-n", action='store_true', dest='no_mlir_runner', help="skip mlir runner")
parser.add_argument("--filecheck", action='store_true', dest='run_filecheck', help="run FileCheck")
parser.add_argument("--check-prefix", default=None, help="change check prefix (default: CHECK) used by FileCheck")
parser.add_argument("--debug", "-d", action='store_true', dest='debug', help="Pass -debug to imex-opt")
parser.add_argument("--runner", "-r", default="imex-cpu-runner", choices=runner_choices, help="mlir runner name")
parser.add_argument('--requires', default=enabled_features, action=SplitArgs, help="skip if any of the required in the comma separated list is missing.")
parser.add_argument("--igpu-fp64", action='store_true', dest='igpu_has_fp64', help="notify runner that igpu has fp64 support")
parser.add_argument("--no-igpu-fp64", action='store_false', dest='igpu_has_fp64', help="notify runner that igpu does not have fp64 support")

args, unknown = parser.parse_known_args()

# Check if requirements are valid
required_features = args.requires
if not set(required_features) <= set(all_features):
    print('Invalid option passed to --requires')
    print('your options were: ', *required_features)
    print('valid options are: ', *all_features)
    exit(1)

if args.igpu_has_fp64:
    enabled_features.append('igpu-fp64')

# Skip runner if requirements are not met be enabled features
if not set(required_features) <= set(enabled_features):
    exit(0)

ppipeline = None
if args.pass_pipeline_file:
    with open(args.pass_pipeline_file, 'r') as infile:
        for l in infile:
            # Strip C++ style single line comments and append to ppipeline
            l = re.sub('//.*?\n', '', l)
            # get rid of leading and trailing whitespaces, tabs and newlines
            l = l.strip()
            if len(l):
                ppipeline = ','.join([ppipeline, l]) if ppipeline else l
        # get rid of leading and trailing whitespaces, tabs and newlines
        ppipeline = ppipeline.strip()
        # get rid of duplicate ','s
        ppipeline = re.sub(r",+", ",", ppipeline)
        # replace "(," with "("
        ppipeline = re.sub(r"\(,", "(", ppipeline)
        # replace ",)" with ")"
        ppipeline = re.sub(r",\)", ")", ppipeline)
        # get rid of trailing ','s
        ppipeline = ppipeline.rstrip(',')

imex_binary_dir = '@IMEX_BINARY_DIR@'
llvm_binary_dir = '@LLVM_BINARY_DIR@'

def run_pipeline(cmds):
    """
    Run commands in PIPE, return the last process in chain.
    stdout of intermediate commands are sent to PIPE.
    stdout of last command is not sent to PIPE.
    """
    first_cmd, *rest_cmds = cmds
    if len(cmds) == 1:
        procs = [subprocess.Popen(first_cmd)]
    else:
        procs = [subprocess.Popen(first_cmd, stdout=subprocess.PIPE)]
        if len(cmds) == 2:
            last_stdout = procs[-1].stdout
            cmd = rest_cmds[-1]
            proc = subprocess.Popen(cmd, stdin=last_stdout)
            procs.append(proc)
        else:
            for cmd in rest_cmds[:-1]:
                last_stdout = procs[-1].stdout
                proc = subprocess.Popen(cmd, stdin=last_stdout, stdout=subprocess.PIPE)
                procs.append(proc)
            last_stdout = procs[-1].stdout
            cmd = rest_cmds[-1]
            proc = subprocess.Popen(cmd, stdin=last_stdout)
            procs.append(proc)
    return procs[-1]

# All commands to create a pipeline
cmds = []

# build imex-opt command
cmd = [os.path.normpath(os.path.join(imex_binary_dir, 'bin', 'imex-opt'))]
if ppipeline:
    cmd.append(f'--pass-pipeline={ppipeline}')
elif args.pass_pipeline:
    cmd.append(f'--pass-pipeline={args.pass_pipeline}')
if args.input_file:
    cmd.append(args.input_file)
if args.before:
    cmd.append(f'--mlir-print-ir-before-all')
if args.after:
    cmd.append(f'--mlir-print-ir-after-all')
if args.output_file:
    cmd.append(f'-o')
    cmd.append(f'{args.output_file}')
if args.debug:
    cmd.append(f'-debug')
cmds.append(cmd)

# build runner command
if not args.no_mlir_runner:
    # build runner command: all unknown args will be passed to the runner
    if args.runner.startswith('imex'):
        cmd = [os.path.normpath(os.path.join(imex_binary_dir, 'bin', args.runner))] + unknown
    elif args.runner.startswith('mlir'):
        cmd = [os.path.normpath(os.path.join(llvm_binary_dir, 'bin', args.runner))] + unknown
    cmds.append(cmd)

# build FileCheck command
if args.run_filecheck:
    cmd = [os.path.normpath(os.path.join(llvm_binary_dir, 'bin', 'FileCheck'))]
    if args.check_prefix:
        cmd.append(f'--check-prefix={args.check_prefix}')
    if not args.input_file:
        print('Error: --input-file is required for filecheck')
        exit(1)
    cmd.append(args.input_file)
    cmds.append(cmd)


# Run command pipeline
last_proc = run_pipeline(cmds)

# Wait for last command completion and exit with returncode
last_proc.wait()
exit(last_proc.returncode)
