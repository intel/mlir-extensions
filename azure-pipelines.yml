trigger:
- '*'

pr:
- '*'

jobs:
- job: Windows

  pool:
    vmImage: windows-2019

  steps:
  - task: DownloadPipelineArtifact@2
    displayName: "Get LLVM cache"
    inputs:
      source: 'specific'
      project: 'mlir-llvm'
      pipeline: 'IntelPython.mlir-llvm-recipe'
      runVersion: 'latest'
      artifact: 'mlir-llvm_latest_Windows_NT'
      path: '$(System.DefaultWorkingDirectory)\llvm_cache'

  - script: |
      curl --output tbb.zip -L "https://github.com/oneapi-src/oneTBB/releases/download/v2021.1.1/oneapi-tbb-2021.1.1-win.zip"
      mkdir tbb
      tar -xf "tbb.zip" -C tbb --strip-components=1
    displayName: 'Get TBB'

  - script: |
      call "C:\Miniconda\Scripts\activate"
      call conda install python=3.7 numba=0.53 numpy=1.20 scikit-learn pytest-xdist ninja scipy pybind11 tbb=2021.1 pytest lit -c conda-forge
      call cmake --version
      call set LLVM_PATH=$(System.DefaultWorkingDirectory)\llvm_cache
      call set TBB_PATH=$(System.DefaultWorkingDirectory)\tbb
      python setup.py develop
    displayName: 'Build'

  - script: |
      call "C:\Miniconda\Scripts\activate"
      call set NUMBA_DISABLE_PERFORMANCE_WARNINGS=1
      pytest -n1 -vv --capture=tee-sys
    displayName: 'Tests'

  - script: |
      call "C:\Miniconda\Scripts\activate"
      call ctest -C Release
    displayName: 'CTests'

- job: Linux

  pool:
    vmImage: ubuntu-20.04

  steps:
  - task: DownloadPipelineArtifact@2
    displayName: "Get LLVM cache"
    inputs:
      source: 'specific'
      project: 'mlir-llvm'
      pipeline: 'IntelPython.mlir-llvm-recipe'
      runVersion: 'latest'
      artifact: 'mlir-llvm_latest_Linux'
      path: '$(System.DefaultWorkingDirectory)/llvm_cache'

  - script: |
      wget -O tbb.tgz "https://github.com/oneapi-src/oneTBB/releases/download/v2021.1.1/oneapi-tbb-2021.1.1-lin.tgz"
      mkdir tbb
      tar -xf "tbb.tgz" -C tbb --strip-components=1
    displayName: 'Get TBB'

  - script: |
      git clone https://github.com/oneapi-src/level-zero.git
      cd level-zero
      git checkout v1.5.0
      mkdir level_zero_install
      mkdir build
      cd build
      cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../level_zero_install ..
      make install
    displayName: 'Get L0'

  - script: |
      source /usr/share/miniconda/bin/activate
      conda create -y -n build_env python=3.7 numpy=1.20 scikit-learn pytest-xdist ninja scipy pybind11 pytest lit dpnp=0.5.1 mkl=2021.1 -c conda-forge -c intel
      conda activate build_env
      pip install numba==0.53
      conda install -y tbb=2021 -c conda-forge -c intel --force
      conda list
      python -c "import numba; print('numba', numba.__version__)"
      cmake --version
      chmod -R 777 $(System.DefaultWorkingDirectory)/llvm_cache
      export LLVM_PATH=$(System.DefaultWorkingDirectory)/llvm_cache
      export TBB_PATH=$(System.DefaultWorkingDirectory)/tbb
      export LEVEL_ZERO_DIR=$(System.DefaultWorkingDirectory)/level-zero/level_zero_install
      export OCL_ICD_FILENAMES_RESET=1
      export OCL_ICD_FILENAMES=libintelocl.so
      export SYCL_DEVICE_FILTER=opencl:cpu
      python setup.py develop
    displayName: 'Build'

  - script: |
      source /usr/share/miniconda/bin/activate
      conda activate build_env
      source $(System.DefaultWorkingDirectory)/tbb/env/vars.sh
      export OCL_ICD_FILENAMES_RESET=1
      export OCL_ICD_FILENAMES=libintelocl.so
      export SYCL_DEVICE_FILTER=opencl:cpu
      export NUMBA_DISABLE_PERFORMANCE_WARNINGS=1
      pytest -n1 -vv --capture=tee-sys
    displayName: 'Tests'

  - script: |
      source /usr/share/miniconda/bin/activate
      conda activate build_env
      source $(System.DefaultWorkingDirectory)/tbb/env/vars.sh
      ctest -C Release
    displayName: 'CTests'

# Disabled for now in purpose to save CI resources
# - job: MacOS

  # pool:
    # vmImage: macOS-10.15

  # steps:
  # - task: DownloadPipelineArtifact@2
    # displayName: "Get LLVM cache"
    # inputs:
      # source: 'specific'
      # project: 'mlir-llvm'
      # pipeline: 'IntelPython.mlir-llvm-recipe'
      # runVersion: 'latest'
      # artifact: 'mlir-llvm_latest_Darwin'
      # path: '$(System.DefaultWorkingDirectory)/llvm_cache'

  # - script: |
      # wget -O tbb.tgz "https://github.com/oneapi-src/oneTBB/releases/download/v2021.1.1/oneapi-tbb-2021.1.1-mac.tgz"
      # mkdir tbb
      # tar -xf "tbb.tgz" -C tbb --strip-components=1
    # displayName: 'Get TBB'

  # # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
  # # We need to take ownership if we want to update conda or install packages globally
  # - bash: sudo chown -R $USER $CONDA
    # displayName: Take ownership of conda installation

  # - script: |
      # source /usr/local/miniconda/bin/activate
      # conda create -y -n test_env python=3.9 numba=0.53 scipy pybind11 tbb=2021.1 pytest lit -c conda-forge
      # conda activate test_env
      # cmake --version
      # chmod -R 777 $(System.DefaultWorkingDirectory)/llvm_cache
      # export LLVM_PATH=$(System.DefaultWorkingDirectory)/llvm_cache
      # export TBB_PATH=$(System.DefaultWorkingDirectory)/tbb
      # python setup.py develop
    # displayName: 'Build'

  # - script: |
      # source /usr/local/miniconda/bin/activate
      # conda activate test_env
      # pytest -vv --capture=tee-sys
    # displayName: 'Tests'

  # - script: |
      # source /usr/local/miniconda/bin/activate
      # conda activate test_env
      # ctest -C Release
    # displayName: 'CTests'
